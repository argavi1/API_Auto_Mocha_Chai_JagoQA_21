{
  "stats": {
    "suites": 5,
    "tests": 6,
    "passes": 3,
    "pending": 0,
    "failures": 3,
    "start": "2023-12-15T22:25:53.832Z",
    "end": "2023-12-15T22:25:59.240Z",
    "duration": 5408,
    "testsRegistered": 6,
    "passPercent": 50,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0a07983d-4cf8-400b-8182-dac72380ff50",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "fd0ffbbb-eb71-425a-9ef4-11d2bddeba08",
          "title": "Scenario Delete Profile Feature",
          "fullFile": "C:\\Users\\USER\\Documents\\belajar_mocha_2\\test\\api-test\\check.test.js",
          "file": "\\test\\api-test\\check.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Delete Profile",
              "fullTitle": "Scenario Delete Profile Feature 1. Verifying Success Delete Profile",
              "timedOut": false,
              "duration": 2207,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7); \nconst responseRegister = await domain\n    .post(\"/register\")\n    .send({ email: random_email + \"@gmail.com\", password: random_email, name: random_email });\n\nconst responseLogin = await domain \n  .post(\"/login\")\n  .send({ email: random_email + \"@gmail.com\", password: random_email });\n\n// Memasukan accessToken dari sukses login ke const authToken  \nconst authToken = responseLogin.body.credentials.access_token;    \nconst response = await domain \n  .delete(\"/delete-user\")\n  .set(\"Authorization\", `${authToken}`) // Memasukan authToken pada header payload\n  .send({password: random_email})\n\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");  \nexpect(response.body.data).to.eql('Sedih melihatmu pergi ' + random_email);\nexpect(response.body.message).to.eql('Berhasil Hapus User');\nexpect(response.body.status).to.eql('SUCCESS_DELETE_PROFILE')",
              "err": {},
              "uuid": "c0374d84-8c56-414d-a65c-43eeab97b289",
              "parentUUID": "fd0ffbbb-eb71-425a-9ef4-11d2bddeba08",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c0374d84-8c56-414d-a65c-43eeab97b289"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2207,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "fd805413-66ac-4d29-9637-620a740262d4",
          "title": "Scenario List User Feature",
          "fullFile": "C:\\Users\\USER\\Documents\\belajar_mocha_2\\test\\api-test\\list_user.test.js",
          "file": "\\test\\api-test\\list_user.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Get List User",
              "fullTitle": "Scenario List User Feature 1. Verifying Success Get List User",
              "timedOut": false,
              "duration": 574,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const email = \"jokotampan900@gmail.com\";\nconst response = await domain \n  .get(\"/list-user\") // Menggunakan method get \n  .query({email})\n  \nexpect(response.body.status).to.eql('SUCCESS_USER_LIST');\nexpect(response.body.message).to.eql('List of registered users');\nexpect(response.body).to.include.keys(\"data\", \"message\", \"pagination\", \"status\");",
              "err": {},
              "uuid": "4468e762-dd76-4a06-ad63-f1eccc069c43",
              "parentUUID": "fd805413-66ac-4d29-9637-620a740262d4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4468e762-dd76-4a06-ad63-f1eccc069c43"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 574,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8210dd3e-9146-4a86-8a07-c1400a8356b7",
          "title": "Scenario Login Feature",
          "fullFile": "C:\\Users\\USER\\Documents\\belajar_mocha_2\\test\\api-test\\login.test.js",
          "file": "\\test\\api-test\\login.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Login with valid email and password",
              "fullTitle": "Scenario Login Feature 1. Verifying Success Login with valid email and password",
              "timedOut": false,
              "duration": 685,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain \n  .post(\"/login\")\n  .send({ email: \"jokotampan900@gmail.com\", \n        password: \"jokotampan900\" \n        });\n  \nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\", \"credentials\"); \nexpect(response.body.status).to.eql('SUCCESS_LOGIN');\nexpect(response.body.message).to.eql('Anda Berhasil Login');",
              "err": {
                "message": "AssertionError: expected { data: 'User\\'s not found', …(2) } to contain keys 'data', 'message', 'status', and 'credentials'",
                "estack": "AssertionError: expected { data: 'User\\'s not found', …(2) } to contain keys 'data', 'message', 'status', and 'credentials'\n    at Context.<anonymous> (test\\api-test\\login.test.js:12:38)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": " [\n+   \"credentials\"\n   \"data\"\n   \"message\"\n   \"status\"\n ]\n"
              },
              "uuid": "f0a9a83b-3a93-4a44-abb8-7d56655507ae",
              "parentUUID": "8210dd3e-9146-4a86-8a07-c1400a8356b7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "f0a9a83b-3a93-4a44-abb8-7d56655507ae"
          ],
          "pending": [],
          "skipped": [],
          "duration": 685,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "99f7c369-3860-4ac4-80fd-2b405e6f603a",
          "title": "Scenario Register Feature",
          "fullFile": "C:\\Users\\USER\\Documents\\belajar_mocha_2\\test\\api-test\\register.test.js",
          "file": "\\test\\api-test\\register.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Failed Register With Duplicate Email Address",
              "fullTitle": "Scenario Register Feature 1. Verifying Failed Register With Duplicate Email Address",
              "timedOut": false,
              "duration": 580,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await domain\n    .post(\"/register\")\n    .send({ email: \"coba@gmail.com\", \n            password: \"coba\", \n            name:\"rina\" \n        });\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.status).to.eql('FAILED_REGISTER');\nexpect(response.body.data).to.eql('Email sudah terdaftar, gunakan Email lain');\nexpect(response.body.message).to.eql('Gagal Registrasi');\nexpect(response.statusCode).to.eql(420)",
              "err": {
                "message": "AssertionError: expected {} to contain keys 'data', 'message', and 'status'",
                "estack": "AssertionError: expected {} to contain keys 'data', 'message', and 'status'\n    at Context.<anonymous> (test\\api-test\\register.test.js:13:42)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "- []\n+ [\n+   \"data\"\n+   \"message\"\n+   \"status\"\n+ ]\n"
              },
              "uuid": "5f6bb5e4-1e3f-4c80-862f-eeaa6c306d48",
              "parentUUID": "99f7c369-3860-4ac4-80fd-2b405e6f603a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "3. Verifying Success Register With Random Email Address",
              "fullTitle": "Scenario Register Feature 3. Verifying Success Register With Random Email Address",
              "timedOut": false,
              "duration": 576,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let random_email = Math.random().toString(36).substring(7); // Membuat const random_email yang menghasilkan random string seperti 12is83\nconst response = await domain\n    .post(\"/register\")\n    .send({ email: random_email + \"@gmail.com\", password: random_email, name: random_email });\nconsole.log(random_email);\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");\nexpect(response.body.data).to.eql('berhasil');\nexpect(response.body.message).to.eql('created user!');\nexpect(response.body.status).to.eql('SUCCESS_REGISTER');",
              "err": {},
              "uuid": "ef4fff93-1861-4b5c-b1b8-7da75017be2d",
              "parentUUID": "99f7c369-3860-4ac4-80fd-2b405e6f603a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ef4fff93-1861-4b5c-b1b8-7da75017be2d"
          ],
          "failures": [
            "5f6bb5e4-1e3f-4c80-862f-eeaa6c306d48"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1156,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "df0f0cf8-b52b-4b9d-ab27-20caa18bdb4c",
          "title": "Scenario Update Profile Feature",
          "fullFile": "C:\\Users\\USER\\Documents\\belajar_mocha_2\\test\\api-test\\update_profile.test.js",
          "file": "\\test\\api-test\\update_profile.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1. Verifying Success Update Profile",
              "fullTitle": "Scenario Update Profile Feature 1. Verifying Success Update Profile",
              "timedOut": false,
              "duration": 735,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const responseLogin = await domain \n  .post(\"/login\")\n  .send({ email: \"jokotampan900@gmail.com\", password: \"jokotampan900\" });\n\nconst authToken = responseLogin.body.credentials.access_token;    \nconst response = await domain \n  .put(\"/update-profile\")\n  .set(\"Authorization\", `${authToken}`)\n  .send({name: \"argavi\"})\n\nexpect(response.body).to.include.keys(\"data\", \"message\", \"status\");  \nexpect(response.body.data).to.eql('Username Anda menjadi argavi');\nexpect(response.body.message).to.eql('Berhasil Perbarui Profile');\nexpect(response.body.status).to.eql('SUCCESS_UPDATE_PROFILE')",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'access_token')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'access_token')\n    at Context.<anonymous> (test\\api-test\\update_profile.test.js:11:54)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": null
              },
              "uuid": "68e67002-4728-4eee-9725-10e3e6cedc4d",
              "parentUUID": "df0f0cf8-b52b-4b9d-ab27-20caa18bdb4c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [
            "68e67002-4728-4eee-9725-10e3e6cedc4d"
          ],
          "pending": [],
          "skipped": [],
          "duration": 735,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}